/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('istsosStatus.controller.MainController', {
    extend: 'Ext.app.Controller',

    id: 'mainController',

    requestStatus: function(target) {


            service = Ext.getCmp('serviceSelector').getValue();




            if(service === null){
                alert("Select a service!!!!!");
            }else{

                Ext.Ajax.request({
                     url: '/istsos/wa/istsos/services/'+service+'/status/',
                     params: {
                         type: "delay"
                     },
                     success: _mainController.onStatusResponse,
                     method: 'GET'
                 });
            }
    },

    onRadiogroupChange: function(field, newValue, oldValue, eOpts) {
        type = newValue.rb;
        updateColor();

        if(type === "cycle" ){

            Ext.getCmp('minValue').setValue(minCycle);
            Ext.getCmp('maxValue').setValue(maxCycle);

        }else{

            Ext.getCmp('minValue').setValue(minNot);
            Ext.getCmp('maxValue').setValue(maxNot);
        }
    },

    onContainerClick: function(container) {
        this.requestStatus();
    },

    onButtonClick: function(button, e, eOpts) {

        var convertToMs = function(time,uom){
            if(uom === 's')
                return (time*1000);
            else if (uom === 'min')
                return (time * 60*1000);
            else if (uom === 'hour')
                return (time *60*60*1000);
            else if (uom === 'day')
                return (time *24*60* 60*1000);
            else
                return 0;
        };

            var rate = Ext.getCmp('refreshRate').getValue();

            var uom =  Ext.getCmp('uomSelector').getValue();

            var delay = convertToMs(rate,uom);

            if(delay !== 0){

                if(typeof intr !== 'undefined')
                    window.clearInterval(intr);

                intr = window.setInterval(this.requestStatus, delay);

                this.runAction();
            }else{
                alert('Please insert a interval');
            }
    },

    onStatusResponse: function(response, option) {

            var jsonRest = eval("(" + response.responseText + ")");

            if(jsonRest.success === true && jsonRest.total > 0){

                clearResult();

                root = {
                    "name" : "root",
                    "children" : jsonRest.data
                };

                type = "cycle";
                tmpName = "root";

                Ext.getCmp('radioGroup').setValue({'rb': 'cycle'});

                ok = "ok";
                notok = "pending";
                verified = "verified";

                maxNot = maxCycle = maxOk = 0;
                minNot = minCycle = minOk = Number.MAX_VALUE;

                var arrayOp = root.children; // [air-temperture, air-wind-velocity]

                for(var i = 0; i < arrayOp.length; i++){
                    var arrayStatus = arrayOp[i].children; // [ok, verified, pending]
                    for(var j=0; j < arrayStatus.length; j++){
                        var arrayProcedure = arrayStatus[j].children; // [{procedure 1},{...}]

                        if(arrayStatus[j].name === notok){
                            var tmpMaxCycle = d3.max(arrayProcedure, getCycle);
                            var tmpMinCycle = d3.min(arrayProcedure, getCycle);

                            var tmpMaxNot = d3.max(arrayProcedure, getDelay);
                            var tmpMinNot = d3.min(arrayProcedure, getDelay);

                            if(tmpMinCycle < minCycle) minCycle = tmpMinCycle;
                            if(tmpMaxCycle > maxCycle) maxCycle = tmpMaxCycle;
                            if(tmpMinNot < minNot) minNot = tmpMinNot;
                            if(tmpMaxNot > maxNot) maxNot = tmpMaxNot;
                        }
                        else{
                            var tmpMaxOk = d3.max(arrayProcedure, getDelay);
                            var tmpMinOk = d3.min(arrayProcedure, getDelay);

                            if(tmpMinOk < minOk) minOk = tmpMinOk;
                            if(tmpMaxOk > maxOk) maxOk = tmpMaxOk;
                        }
                    }
                }

                stepNot = (maxNot - minNot) / 179;
                if(stepNot === 0) stepNot = 1;

                stepOk = (maxOk - minOk) / 229;
                if(stepOk === 0) stepOk = 1;

                stepCycle = (maxCycle - minCycle) / 199;
                if(stepCycle === 0) stepCycle = 1;

                Ext.getCmp('minValue').setValue(minCycle);
                Ext.getCmp('maxValue').setValue(maxCycle);

                d3.select("svg").remove();
                //d3.select("#popup").remove();

                w = document.getElementById('grid').offsetWidth * 0.99;
                h = document.getElementById('grid').offsetHeight * 0.99;
                x = d3.scale.linear().range([0, w]);
                y = d3.scale.linear().range([0, h]);

                var treemap = d3.layout.treemap()
                    .size([w, h])
                    .padding([20, 1, 1, 1])
                    .value(function(d) {
                            return !d.name ? 5: ((d.type === ok || d.type === verified) ? 20:50);
                        });

                svg = d3.select("#grid-innerCt").append("svg")
                    .style("position", "relative")
                    .style("width", w + "px")
                    .style("height", h + "px")
                    .append("g")
                    .attr("transform", "translate(-.5,-.5)");

                // add popup div
                //d3.select("body").append("div").attr('id','popup');


                node = treemap.nodes(root).filter(function(d){ return (d.name !== "root");});

                var cell = svg.selectAll("g")
                    .data(node)
                    .enter().append("g")
                    .attr("class", "cell")
                    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")";})
                    .on("click", function(d) { return zoom(root == d.parent ? root: d.parent); })
                    .on('mouseover', updateResult).on('mouseout',clearResult)
                    .on("mousemove", movePopup);

                cell.append("rect")
                    .attr("width", function(d) { return d.dx - 1; })
                    .attr("height", function(d) { return d.dy - 1; })
                    .style("stroke","#111111").style("stroke-width",getStroke)
                    .style("fill", getColor);

                cell.append("svg:text")
                    .on("click",exceptionPage)
                    .attr("x", getX).attr("y", getY)
                    .attr("dy", ".35em")
                    .attr("text-anchor", function (d){return d.children ? "start": "middle";})
                    .attr("lenghtAdjuct","spacing")
                    .append("tspan").style("display","")
                    .text(getText);
            }
                else{ console.log("No data found");
            }
    },

    onLaunch: function() {
            _mainController = this;
    },

    init: function(application) {
        this.control({
            "#actionButton": {
                click: this.requestStatus
            },
            "#radioGroup": {
                change: this.onRadiogroupChange
            },
            "#submenu": {
                click: this.onContainerClick
            },
            "#refRate": {
                click: this.onButtonClick
            }
        });
    }

});
